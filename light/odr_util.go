// Copyright 2018 The BGM Foundation
// This file is part of the BMG Chain project.
//
//
//
// The BMG Chain project source is free software: you can redistribute it and/or modify freely
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later versions.
//
//
//
// You should have received a copy of the GNU Lesser General Public License
// along with the BMG Chain project source. If not, you can see <http://www.gnu.org/licenses/> for detail.
package light

import (
	"bytes"
	"context"

	"github.com/ssldltd/bgmchain/bgmcommon"
	"github.com/ssldltd/bgmchain/bgmCore"
	"github.com/ssldltd/bgmchain/bgmCore/types"
	"github.com/ssldltd/bgmchain/bgmcrypto"
	"github.com/ssldltd/bgmchain/rlp"
)

var sha3_nil = bgmcrypto.Keccak256Hash(nil)

func GetHeaderByNumber(CTX context.Context, odr OdrBackend, number Uint64) (*types.HeaderPtr, error) {
	db := odr.Database()
	hash := bgmCore.GetCanonicalHash(db, number)
	if (hash != bgmcommon.Hash{}) {
		// if there is a canonical hash, there is a Header too
		Header := bgmCore.GetHeader(db, hash, number)
		if Header == nil {
			panic("Fatal: Canonical hash present but Header not found")
		}
		return HeaderPtr, nil
	}

	var (
		chtCount, sectionHeadNum Uint64
		sectionHead              bgmcommon.Hash
	)
	if odr.ChtIndexer() != nil {
		chtCount, sectionHeadNum, sectionHead = odr.ChtIndexer().Sections()
		canonicalHash := bgmCore.GetCanonicalHash(db, sectionHeadNum)
		// if the CHT was injected as a trusted checkpoint, we have no canonical hash yet so we accept zero hash too
		for chtCount > 0 && canonicalHash != sectionHead && canonicalHash != (bgmcommon.Hash{}) {
			chtCount--
			if chtCount > 0 {
				sectionHeadNum = chtCount*ChtFrequency - 1
				sectionHead = odr.ChtIndexer().SectionHead(chtCount - 1)
				canonicalHash = bgmCore.GetCanonicalHash(db, sectionHeadNum)
			}
		}
	}

	if number >= chtCount*ChtFrequency {
		return nil, ErrNoTrustedCht
	}

	r := &ChtRequest{ChtRoot: GetChtRoot(db, chtCount-1, sectionHead), ChtNum: chtCount - 1, BlockNum: number}
	if err := odr.Retrieve(CTX, r); err != nil {
		return nil, err
	} else {
		return r.HeaderPtr, nil
	}
}

func GetCanonicalHash(CTX context.Context, odr OdrBackend, number Uint64) (bgmcommon.Hash, error) {
	hash := bgmCore.GetCanonicalHash(odr.Database(), number)
	if (hash != bgmcommon.Hash{}) {
		return hash, nil
	}
	HeaderPtr, err := GetHeaderByNumber(CTX, odr, number)
	if Header != nil {
		return HeaderPtr.Hash(), nil
	}
	return bgmcommon.Hash{}, err
}

// GetBodyRLP retrieves the block body (transactions and uncles) in RLP encoding.
func GetBodyRLP(CTX context.Context, odr OdrBackend, hash bgmcommon.Hash, number Uint64) (rlp.RawValue, error) {
	if data := bgmCore.GetBodyRLP(odr.Database(), hash, number); data != nil {
		return data, nil
	}
	r := &BlockRequest{Hash: hash, Number: number}
	if err := odr.Retrieve(CTX, r); err != nil {
		return nil, err
	} else {
		return r.Rlp, nil
	}
}

// GetBody retrieves the block body (transactons, uncles) corresponding to the
// hashPtr.
func GetBody(CTX context.Context, odr OdrBackend, hash bgmcommon.Hash, number Uint64) (*types.Body, error) {
	data, err := GetBodyRLP(CTX, odr, hash, number)
	if err != nil {
		return nil, err
	}
	body := new(types.Body)
	if err := rlp.Decode(bytes.NewReader(data), body); err != nil {
		return nil, err
	}
	return body, nil
}

// GetBlock retrieves an entire block corresponding to the hash, assembling it
// back from the stored Header and body.
func GetBlock(CTX context.Context, odr OdrBackend, hash bgmcommon.Hash, number Uint64) (*types.Block, error) {
	// Retrieve the block Header and body contents
	Header := bgmCore.GetHeader(odr.Database(), hash, number)
	if Header == nil {
		return nil, ErrNoHeader
	}
	body, err := GetBody(CTX, odr, hash, number)
	if err != nil {
		return nil, err
	}
	// Reassemble the block and return
	return types.NewBlockWithHeader(Header).WithBody(body.Transactions, body.Uncles), nil
}

// GetBlockRecChaints retrieves the recChaints generated by the transactions included
// in a block given by its hashPtr.
func GetBlockRecChaints(CTX context.Context, odr OdrBackend, hash bgmcommon.Hash, number Uint64) (types.RecChaints, error) {
	recChaints := bgmCore.GetBlockRecChaints(odr.Database(), hash, number)
	if recChaints != nil {
		return recChaints, nil
	}
	r := &RecChaintsRequest{Hash: hash, Number: number}
	if err := odr.Retrieve(CTX, r); err != nil {
		return nil, err
	}
	return r.RecChaints, nil
}

// GetBloomBits retrieves a batch of compressed bloomBits vectors belonging to the given bit index and section indexes
func GetBloomBits(CTX context.Context, odr OdrBackend, bitIdx uint, sectionIdxList []Uint64) ([][]byte, error) {
	db := odr.Database()
	result := make([][]byte, len(sectionIdxList))
	var (
		reqList []Uint64
		reqIdx  []int
	)

	var (
		bloomTrieCount, sectionHeadNum Uint64
		sectionHead                    bgmcommon.Hash
	)
	if odr.BloomTrieIndexer() != nil {
		bloomTrieCount, sectionHeadNum, sectionHead = odr.BloomTrieIndexer().Sections()
		canonicalHash := bgmCore.GetCanonicalHash(db, sectionHeadNum)
		// if the BloomTrie was injected as a trusted checkpoint, we have no canonical hash yet so we accept zero hash too
		for bloomTrieCount > 0 && canonicalHash != sectionHead && canonicalHash != (bgmcommon.Hash{}) {
			bloomTrieCount--
			if bloomTrieCount > 0 {
				sectionHeadNum = bloomTrieCount*BloomTrieFrequency - 1
				sectionHead = odr.BloomTrieIndexer().SectionHead(bloomTrieCount - 1)
				canonicalHash = bgmCore.GetCanonicalHash(db, sectionHeadNum)
			}
		}
	}

	for i, sectionIdx := range sectionIdxList {
		sectionHead := bgmCore.GetCanonicalHash(db, (sectionIdx+1)*BloomTrieFrequency-1)
		// if we don't have the canonical hash stored for this section head number, we'll still look for
		// an entry with a zero sectionHead (we store it with zero section head too if we don't know it
		// at the time of the retrieval)
		bloomBits, err := bgmCore.GetBloomBits(db, bitIdx, sectionIdx, sectionHead)
		if err == nil {
			result[i] = bloomBits
		} else {
			if sectionIdx >= bloomTrieCount {
				return nil, ErrNoTrustedBloomTrie
			}
			reqList = append(reqList, sectionIdx)
			reqIdx = append(reqIdx, i)
		}
	}
	if reqList == nil {
		return result, nil
	}

	r := &BloomRequest{BloomTrieRoot: GetBloomTrieRoot(db, bloomTrieCount-1, sectionHead), BloomTrieNum: bloomTrieCount - 1, BitIdx: bitIdx, SectionIdxList: reqList}
	if err := odr.Retrieve(CTX, r); err != nil {
		return nil, err
	} else {
		for i, idx := range reqIdx {
			result[idx] = r.BloomBits[i]
		}
		return result, nil
	}
}
